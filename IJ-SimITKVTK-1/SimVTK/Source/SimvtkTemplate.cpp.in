// =================
// Copyright (c) Queen's University
// All rights reserved.

// See Copyright.txt for more details.
// =================

/*This will be a semi-template for how all the others should be so that things can easily be inputted/transformed.
Stuff to fill in will be marked by @STUFF@
*/


/*
 * You must specify the S_FUNCTION_NAME as the name of your S-function.
 */

#define S_FUNCTION_NAME  Sim@FILTER_NAME@Mat
#define S_FUNCTION_LEVEL 2
#define MATLAB_MEX_FILE

/*
 * Need to include simstruc.h for the definition of the SimStruct and
 * its associated macro definitions.
 *
 * The following headers are included by matlabroot/simulink/include/simstruc.h
 * when compiling as a MEX file:
 *
 *   matlabroot/extern/include/tmwtypes.h    - General types, e.g. real_T
 *   matlabroot/extern/include/mex.h         - MATLAB MEX file API routines
 *   matlabroot/extern/include/matrix.h      - MATLAB MEX file API routines
 *
 */
#include "simstruc.h"
#include "vtkAlgorithmOutput.h"
#include "vtkAlgorithm.h"
#include "vtkDataObject.h"
#include "@FILTER_NAME@.h"
@LINUX_HEADER@

//must include if written in c++
#ifdef __cplusplus
extern "C" { // use the C fcn-call standard for all functions  
#endif       // defined within this scope


/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *    The sizes information is used by Simulink to determine the S-function
 *    block's characteristics (number of inputs, outputs, states, etc.).
 *
 *    The direct feedthrough flag can be either 1=yes or 0=no. It should be
 *    set to 1 if the input, "u", is used in the mdlOutput function. Setting
 *    this to 0 is akin to making a promise that "u" will not be used in the
 *    mdlOutput function. If you break the promise, then unpredictable results
 *    will occur.
 *
 *    The NumContStates, NumDiscStates, NumInputs, NumOutputs, NumRWork,
 *    NumIWork, NumPWork NumModes, and NumNonsampledZCs widths can be set to:
 *       DYNAMICALLY_SIZED    - In this case, they will be set to the actual
 *                              input width, unless you are have a
 *                              mdlSetWorkWidths to set the widths.
 *       0 or positive number - This explicitly sets item to the specified
 *                              value.
 */
static void mdlInitializeSizes(SimStruct *S)
{
	const int ParameterListInputPortEndLocation = @NUM_INPUTS@; /*location in parameter list where XML inputs stop */
	const int ParameterListOutputPortStartLocation = @NUM_INPUTS_PARAMETERS@; /*inputs + 3*parameters */
	int nInputPorts  = 0;  /* number of input ports  from XML document for optional/repeatable stuff */
	int nPromotedInputPorts = 0; /*number of ports that user wishes to be promoted*/
	int nRealInputPorts = 0; /* number of ports needed for stuff directly from the vtkObject using vtkAlgorithm*/
	int nOutputPorts = 0;  /* number of output ports that the user has specified will be wanted. */
	int nPromotedOutputPorts = 0; /*number of ports that the user wishes to be promoted*/
	int InputPortIndex  = 0; /* current position in input port list */
	int OutputPortIndex = 0; /* current position in output port list */
	
	int needsInput = 1; /*require all ports to be direct feedthrough */

	int i = 0;
	
	DTypeId id;
	
	if (ssGetDataTypeId((S), "vtkObject") == INVALID_DTYPE_ID)
	{
		int status;
		id = ssRegisterDataType(S, "vtkObject");
		if(id == INVALID_DTYPE_ID) return;
		status = ssSetDataTypeSize(S, id, sizeof(void *));
		if (status == 0) return;
	}
	else 
	{
		id = ssGetDataTypeId(S, "vtkObject");
	}

	/* Number of expected parameters = number of possible inputs + 3*number of possible parameters in XML + number of outputs*/
	ssSetNumSFcnParams(S, @NUM_INPUTS_PARAMETERS_OUTPUTS@);  
	if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
		return;
	}

	ssSetNumContStates(    S, 0);   /* number of continuous states           */
	ssSetNumDiscStates(    S, 0);   /* number of discrete states             */

	/*
	 * Configure the input ports. 
	 */

	//check to see what user wants as inputs
	for (i = 0;  i < ParameterListInputPortEndLocation; i++)
	{
		nInputPorts	+= (int)mxGetScalar(ssGetSFcnParam(S,i));
	}

	/* check to see which parameters should be promoted as inputs (increase count only if the parameter input indicator
	* is set to AsInput... otherwise leave it alone 
	*/
  //CHANGE HERE! (+3 to +2)
	for (i = ParameterListInputPortEndLocation; i < ParameterListOutputPortStartLocation; i = i + 2)
	{
		((int)mxGetScalar(ssGetSFcnParam(S,i)) == 2) ? nPromotedInputPorts++ : nPromotedInputPorts;
	}
		
	//check for number of inputs that the vtkObject takes if is part of vtkAlgorithm

	@ALGORITHM_INITIALIZE_SIZES@

	
	//set Number of input ports
	if (!ssSetNumInputPorts(S, nInputPorts + nPromotedInputPorts + nRealInputPorts)) return;    

	for (i = 0; i < nInputPorts + nRealInputPorts; i++) // for all the input ports that will be pointers
	{
		ssSetInputPortWidth(S, i, 1); 
		ssSetInputPortDirectFeedThrough(S, i, needsInput);
		ssSetInputPortDataType(S, i, id);  
		ssSetInputPortRequiredContiguous(S, i, 1);  // require that all input ports are contiguous
		InputPortIndex++;
	}

@INPUT_ARRAY_SIZES@
			
@INPUT_ARRAY_TYPES@

	// check to see what the user wants to be an output
	for (i = ParameterListOutputPortStartLocation; i < ssGetNumSFcnParams(S); i++)
	{
		nOutputPorts += static_cast<int> (mxGetScalar(ssGetSFcnParam(S,i)));
	}
	
	// check which parameters were promoted to output status
  // CHANGE HERE! (+3 to +2 and switch how its added to be like for inputs)
	for (i = ParameterListInputPortEndLocation; i < ParameterListOutputPortStartLocation; i = i + 2)
	{
    ((int)mxGetScalar(ssGetSFcnParam(S,i)) == 4) ? nPromotedOutputPorts++ : nPromotedOutputPorts;
	}

	//setting number of output ports 
	if (!ssSetNumOutputPorts(S, nOutputPorts + nPromotedOutputPorts)) return;
	
	/*
	 * Set output port dimensions for each output port.
	 * Since each output will always be passed as a pointer, so only need to keep track of current location in simulink port list.
	 */
	for (i = 0; i < nOutputPorts; i++) //for outputs that will be pointers
	{
		ssSetOutputPortWidth(S, OutputPortIndex, 1);
		ssSetOutputPortDataType(S, OutputPortIndex, id);
		OutputPortIndex++;
	}

	/* set up all outputs for the parameters that have been promoted to outputs */
@OUTPUT_ARRAY_SIZES@

@OUTPUT_ARRAY_TYPES@

	

	ssSetNumSampleTimes(   S, 1);   /* number of sample times                */

	ssSetNumRWork(         S, 0);   /* number of real work vector elements   */
	ssSetNumIWork(         S, 0);   /* number of integer work vector elements*/
	ssSetNumPWork(         S, 0);   /* number of pointer work vector elements*/
	ssSetNumModes(         S, 0);   /* number of mode work vector elements   */
	ssSetNumNonsampledZCs( S, 0);   /* number of nonsampled zero crossings   */
	ssSetOptions(          S, SS_OPTION_CALL_TERMINATE_ON_EXIT);   /* since objects are created in mdlStart, always want them deleted at end */

} /* end mdlInitializeSizes */


/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *
 *    This function is used to specify the sample time(s) for your S-function.
 *    You must register the same number of sample times as specified in
 *    ssSetNumSampleTimes. If you specify that you have no sample times, then
 *    the S-function is assumed to have one inherited sample time.
 *
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
	/* Register one pair for each sample time */
	ssSetSampleTime(S, 0, CONTINUOUS_SAMPLE_TIME);
	ssSetOffsetTime(S, 0, 0.0);

} /* end mdlInitializeSampleTimes */


#define MDL_START  /* Change to #undef to remove function */
#if defined(MDL_START)
  /* Function: mdlStart =======================================================
   * Abstract:
   *    This function is called once at start of model execution. If you
   *    have states that should be initialized once, this is the place
   *    to do it.
   */
static void mdlStart(SimStruct *S)
{
	int inputPortIndex = 0, nInputPorts = 0, outputPortIndex = 0, i = 0, j = 0, nRealInputPorts = 0, nOutputPorts = 0; // used to pass through list of parameters and do correct thing with each entered parameter
	//get the number of inputs that the vtkAlgorithm will use (so know location of where self indicator will be)
  @ALGORITHM_INITIALIZE_SIZES@
  
  //get location of where the input for self should be
  inputPortIndex = nRealInputPorts;
  
  //create the vtkObject and store pointer in user data
	@FILTER_NAME@ *filter;
  
  if (static_cast<int>(mxGetScalar(ssGetSFcnParam(S, @SELF_INPUT_LOCATION@))) == 0)
  {
    filter =  @FILTER_NAME@::New();
  }
  else 
  {
    void *tempPoint = const_cast<void*>(ssGetInputPortSignal(S, inputPortIndex));
    vtkObject **pointer;
    pointer = reinterpret_cast<vtkObject**>(tempPoint);
    if (pointer[0]->IsA("@FILTER_NAME@"))
    {
      filter = dynamic_cast<@FILTER_NAME@*>( pointer[0] );
      inputPortIndex++;
    }
    else
    {
      ssPrintf("Bad Input for self for %s.\n", "@FILTER_NAME@");
      filter = @FILTER_NAME@::New();
    }
  }  
  
	ssSetUserData(S, reinterpret_cast<void*>(filter));

	//take care of all inputs created by the vtkObject first (so stay at top of list)
	@ALGORITHM_START_INPUT@

	// take care of all outputs created by the vtkObject first (so stay at top of list)
	@ALGORITHM_START_OUTPUT@

	// Set up all parameters that will be constant throughout the program and all pointers  (which also stay constant)
	/* Set up all inputs and outputs first as they will likely stay as input/output more than parameters so less changing of arrows */

@PROCESS_INPUT@
@PROCESS_OUTPUT@
@PROCESS_PARAMETERS_START@
	
}
#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 * Abstract:
 *    In this function, you compute the outputs of your S-function
 *    block. Generally outputs are placed in the output vector(s),
 *    ssGetOutputPortSignal.
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{
	int inputPortIndex = 0, outputPortIndex = 0, nInputPortIDX = @NUM_INPUTS@, nOutputPortIDX = @NUM_INPUTS_PARAMETERS@, nInputPorts = 0, i = 0, j = 0;
	/* set up the vtkObject with all the proper parameters if parameters can change and render/initialize/etc. here */
	
	@FILTER_NAME@ *filter = reinterpret_cast<@FILTER_NAME@ *> (ssGetUserData(S));

	UNUSED_ARG(tid);
	
	/*Check to see where the parameter inputs start in the port listing*/
	for (i = 0; i < nInputPortIDX; i++)
	{
		inputPortIndex += static_cast<int>(mxGetScalar(ssGetSFcnParam(S,i)));
	}
	
	@ALGORITHM_UPDATE_INPUTS@
	
	/*Check to see where the parameter inputs start in the port listing*/
	for (i = nOutputPortIDX; i < ssGetNumSFcnParams(S); i++)
	{
		outputPortIndex += static_cast<int>(mxGetScalar(ssGetSFcnParam(S,i)));
	}
	
	@ALGORITHM_UPDATE_OUTPUTS@
	
	/*Set up all parameters that have been promoted to inputs or outputs*/

@PROCESS_PARAMETERS_OUTPUT@

	//filter->Render() if is a render window
	@RENDER_WINDOW@ 

	//filter->Initialize() if is a render window interactor
	@RENDER_WINDOW_INTERACTOR@ 

} /* end mdlOutputs */

@DYNAMIC@ MDL_SET_INPUT_PORT_DIMENSION_INFO  // do same for output 
#if defined(MDL_SET_INPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetInputPortDimensionInfo ====================================
   * Abstract:
   *    This method is called with the candidate dimensions for an input port
   *    with unknown dimensions. If the proposed dimensions are acceptable, the 
   *    method should go ahead and set the actual port dimensions.  
   *    If they are unacceptable an error should be generated via 
   *    ssSetErrorStatus.  
   */
static void mdlSetInputPortDimensionInfo(SimStruct *S, int_T port, const DimsInfo_T *dimsInfo)
{
	//dynamically set input port dimensions from the input signal at runtime
	if(!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;
}
#endif /* MDL_SET_INPUT_PORT_DIMENSION_INFO */

@DYNAMIC@ MDL_SET_OUTPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetOutputPortDimensionInfo ===================================
   * Abstract:
   *    This method is called with the candidate dimensions for an output port 
   *    with unknown dimensions. If the proposed dimensions are acceptable, the 
   *    method should go ahead and set the actual port dimensions.  
   *    If they are unacceptable an error should be generated via 
   *    ssSetErrorStatus.  
   */
static void mdlSetOutputPortDimensionInfo(SimStruct *S, int_T port, const DimsInfo_T *dimsInfo)
{
	//dynamically set ouput port dimensions from the ouput signal at runtime
	if(!ssSetOutputPortDimensionInfo(S, port, dimsInfo)) return;
}
#endif /* MDL_SET_OUTPUT_PORT_DIMENSION_INFO */
/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was allocated
 *    in mdlStart, this is the place to free it.
 *
 */
static void mdlTerminate(SimStruct *S)
{
	//Free memory used by filter
	@FILTER_NAME@ *filter = reinterpret_cast<@FILTER_NAME@*> (ssGetUserData(S));
	if (filter != NULL) 
	{
		filter->Delete();	 
	} 
}

/*=============================*
 * Required S-function trailer *
 *=============================*/

#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif

#ifdef __cplusplus
} // end of extern "C" scope
#endif

