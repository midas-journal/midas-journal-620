/****************************************************************
SIMITK Project

Copyright (c) Queen's University
All rights reserved.

See Copyright.txt for more details.

Karen Li and Jing Xiang
June 2008

SimITK@FILTER_NAME@Mat.cpp
******************************************************************/

//setup s-function type, format and name
#define S_FUNCTION_LEVEL 2
#define MATLAB_MEX_FILE
#define S_FUNCTION_NAME  SimITK@FILTER_NAME@Mat

#define IMAGE_DIMENSIONALITY @DIMENSIONALITY@
#define INPUT_IMAGE_PIXELTYPE @INPUT_PIXELTYPE@
#define OUTPUT_IMAGE_PIXELTYPE @OUTPUT_PIXELTYPE@

//include headers that will be used within the s-function
#include "mex.h"
#include "SimITK@FILTER_NAME@.tpp"

//must include if written in c++
#ifdef __cplusplus
extern "C" { // use the C fcn-call standard for all functions  
#endif       // defined within this scope

/*
 * Need to include simstruc.h for the definition of the SimStruct and
 * its associated macro definitions.
 */
#include "simstruc.h"

/*====================*
 * S-function methods *
 *====================*/

/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *    The sizes information is used by Simulink to determine the S-function
 *    block's characteristics (number of inputs, outputs, states, etc.).
 */
static void mdlInitializeSizes(SimStruct *S)
{
@SETUP_SPECIAL_DATATYPE@

	//setup appropriate number of parameters
	ssSetNumSFcnParams(S, @NUM_PARAMETERS@);
	if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
		// Return if number of expected != number of actual parameters
		return;
	}

	if (IMAGE_DIMENSIONALITY > 2) {
		ssAllowSignalsWithMoreThan2D(S);
	}

	//there are no continuous or discrete states to be used
	ssSetNumContStates(S, 0);
	ssSetNumDiscStates(S, 0);

	//setup 2 input ports for every input image
	//setup 1 input port for special type
@SETUP_INPUT_PORTS@
@SETUP_SPECIAL_INPUT_PORTS@
	//set all input ports to be contiguous
@SET_INPUT_PORTS_CONTIGUOUS@
	
	/*
	* Set direct feedthrough flag (1=yes, 0=no).
	* A port has direct feedthrough if the input is used in either
	* the mdlOutputs or mdlGetTimeOfNextVarHit functions.
	* See matlabroot/simulink/src/sfuntmpl_directfeed.txt.
	*/
	
	//both input ports are set to have direct feedthrough since they are used in mdlOutputs
@SET_INPUT_PORTS_DIRECT_FEEDTHROUGH@
	
	//setup 2 output ports for every output image
@SETUP_OUTPUT_PORTS@
	  
	//set a single sample time
	ssSetNumSampleTimes(S, 1);
	//no work vectors are necessary
	ssSetNumRWork(S, 0);
	ssSetNumIWork(S, 0);
	ssSetNumPWork(S, 0);
	ssSetNumModes(S, 0);
	ssSetNumNonsampledZCs(S, 0);
	ssSetOptions(S, 0);
} //end mdlInitializeSizes

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    This function is used to specify the sample time(s) for your
 *    S-function. You must register the same number of sample times as
 *    specified in ssSetNumSampleTimes.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
	//set sample time to be continous
	ssSetSampleTime(S, 0, CONTINUOUS_SAMPLE_TIME);
	ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_START  /* Change to #undef to remove function */
#if defined(MDL_START)
  /* Function: mdlStart =======================================================
   * Abstract:
   *    This function is called once at start of model execution. If you
   *    have states that should be initialized once, this is the place
   *    to do it.
   */
static void mdlStart(SimStruct *S){
	
	// Creates the filter
	typedef SimITK@FILTER_NAME@ < VirtualPort<INPUT_IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY>,
		VirtualPort<OUTPUT_IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY> > SimITKFilterType;
	SimITKFilterType* filter = new SimITKFilterType; 

	ssSetUserData(S, filter);
}
#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 * Abstract:
 *    In this function, you compute the outputs of your S-function
 *    block. Generally outputs are placed in the output vector, ssGetY(S).
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{
	typedef SimITK@FILTER_NAME@<VirtualPort<INPUT_IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY>,
		VirtualPort<OUTPUT_IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY> > SimITKFilterType;

	void* Pointer = ssGetUserData(S);
	SimITKFilterType* filter = reinterpret_cast<SimITKFilterType*>(Pointer);
		
	// Gets the value from the parameters.
@GET_PARAMETER_VALUES@
@SET_PARAMETER_VALUES@

	//--------------Input Ports

	// Gets the signals from the input ports
@GET_INPUT_PORT_SIGNALS@

	// Set the filter block input.
@SET_FILTER_BLOCK_INPUT@

@SET_FILTER_BLOCK_SPECIAL_INPUTS@
	//--------------Output Ports

	//gets the signals from the output ports
@GET_OUTPUT_PORT_SIGNALS@

	//Set the filter block output
@SET_FILTER_BLOCK_OUTPUT@

	// Will process the image.
	filter->Run();
	
	//Gets the updated origin and spacing and assigns it to the port in case
	//the Run() method changes them
@UPDATE_OUTPUT_DATA_INFORMATION@
}

#define MDL_SET_INPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_INPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetInputPortDimensionInfo ====================================
   * Abstract:
   *    This method is called with the candidate dimensions for an input port
   *    with unknown dimensions. If the proposed dimensions are acceptable, the 
   *    method should go ahead and set the actual port dimensions.  
   *    If they are unacceptable an error should be generated via 
   *    ssSetErrorStatus.  
   *    Note that any other input or output ports whose dimensions are  
   *    implicitly defined by virtue of knowing the dimensions of the given 
   *    port can also have their dimensions set.
   *
   *    See matlabroot/simulink/src/sfun_matadd.c for an example. 
   */
static void mdlSetInputPortDimensionInfo(SimStruct *S, int_T port,
                                         const DimsInfo_T *dimsInfo)
{
	//dynamically set input port dimensions from the input signal at runtime
	if(!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;

	/*Dynamically sets output data port dimensions at runtime. 
	Output data ports are set to the same dimensions as the first input data 
	port, port 1. 
	Future work: Accommodate filters whose input and output port dimensions
	differ. */
	
	if(port == 1){
		int PortTotal = ssGetNumOutputPorts(S);
		for(int p=1; p<PortTotal; p=p+2){ //Note: Change only data ports	
			if(!ssSetOutputPortDimensionInfo(S, p, dimsInfo)) 
				return;
		}
	}
}
#endif /* MDL_SET_INPUT_PORT_DIMENSION_INFO */

#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetOutputPortDimensionInfo ===================================
   * Abstract:
   *    This method is called with the candidate dimensions for an output port 
   *    with unknown dimensions. If the proposed dimensions are acceptable, the 
   *    method should go ahead and set the actual port dimensions.  
   *    If they are unacceptable an error should be generated via 
   *    ssSetErrorStatus.  
   *    Note that any other input or output ports whose dimensions are  
   *    implicitly defined by virtue of knowing the dimensions of the given 
   *    port can also have their dimensions set.
   *
   *    See matlabroot/simulink/src/sfun_matadd.c for an example. 
   */
 static void mdlSetOutputPortDimensionInfo(SimStruct *S, int_T port,
                                            const DimsInfo_T *dimsInfo)
 {
 }
#endif /* MDL_SET_OUTPUT_PORT_DIMENSION_INFO */

#define MDL_SET_DEFAULT_PORT_DIMENSION_INFO /* Change to #define to add fcn */
#if defined(MDL_SET_DEFAULT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetDefaultPortDimensionInfo ==================================
   * Abstract:
   *    This method is called when there is not enough information in your
   *    model to uniquely determine the port dimensionality of signals
   *    entering or leaving your block. When this occurs, Simulink's
   *    dimension propagation engine calls this method to ask you to set
   *    your S-functions default dimensions for any input and output ports
   *    that are dynamically sized.
   *
   *    If you do not provide this method and you have dynamically sized ports
   *    where Simulink does not have enough information to propagate the
   *    dimensionality to your S-function, then Simulink will set these unknown
   *    ports to the 'block width' which is determined by examining any known
   *    ports. If there are no known ports, the width will be set to 1.
   *
   *    See matlabroot/simulink/src/sfun_matadd.c for an example. 
   */
 static void mdlSetDefaultPortDimensionInfo(SimStruct *S)
 {
 } 
#endif /* MDL_SET_DEFAULT_PORT_DIMENSION_INFO */

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
	typedef SimITK@FILTER_NAME@<VirtualPort<INPUT_IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY>,
		VirtualPort<OUTPUT_IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY> > SimITKFilterType;
	
	void* Pointer = ssGetUserData(S);
	SimITKFilterType* filter = reinterpret_cast<SimITKFilterType*>(Pointer);
	delete filter;
}

/*=============================*
 * Required S-function trailer *
 *=============================*/

#ifdef  MATLAB_MEX_FILE	/* This file is to be compiled as a MEX-file */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif

#ifdef __cplusplus
} // end of extern "C" scope
#endif
