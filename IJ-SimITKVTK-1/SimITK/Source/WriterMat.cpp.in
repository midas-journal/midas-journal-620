/****************************************************************
SIMITK Project

Copyright (c) Queen's University
All rights reserved.

See Copyright.txt for more details.

Karen Li and Jing Xiang
June 2008

@WRITER_NAME@.cpp

******************************************************************/

//setup s-function type, format and name
#define S_FUNCTION_LEVEL 2
#define MATLAB_MEX_FILE
#define S_FUNCTION_NAME  @WRITER_NAME@Mat

#define IMAGE_DIMENSIONALITY @DIMENSIONALITY@
#define IMAGE_PIXELTYPE @PIXELTYPE@

//include headers that will be used within the s-function
#include "mex.h"
#include "@WRITER_NAME@.tpp"

//must include if written in c++
#ifdef __cplusplus
extern "C" { // use the C fcn-call standard for all functions  
#endif       // defined within this scope

/*
 * Need to include simstruc.h for the definition of the SimStruct and
 * its associated macro definitions.
 */
#include "simstruc.h"

/*====================*
 * S-function methods *
 *====================*/

/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *    The sizes information is used by Simulink to determine the S-function
 *    block's characteristics (number of inputs, outputs, states, etc.).
 */
static void mdlInitializeSizes(SimStruct *S)
{
	//setup number of parameters to 1
	ssSetNumSFcnParams(S, 1);
	if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
		// Return if number of expected != number of actual parameters
		return;
	}

	if (IMAGE_DIMENSIONALITY > 2) {
		ssAllowSignalsWithMoreThan2D(S);
	}

	//there are no continuous or discrete states to be used
	ssSetNumContStates(S, 0);
	ssSetNumDiscStates(S, 0);

	//set up 2 input ports
	if (!ssSetNumInputPorts(S, 2)) return;
	
	//setup 0 output port
	if (!ssSetNumOutputPorts(S, 0)) return;
	
	//setup input port 1 (Image Information)
	ssSetInputPortDataType( S, 0, SS_DOUBLE);
	ssSetInputPortMatrixDimensions(S, 0, 2, IMAGE_DIMENSIONALITY);

	//setup input port 2 (Image Data)
	ssSetInputPortDataType( S, 1, @SIMULINK_PIXELTYPE@);

	//struct dimensionInfoInputPort2;
	DECL_AND_INIT_DIMSINFO(dimensionInfoInputPort2);
	dimensionInfoInputPort2.numDims = DYNAMICALLY_SIZED;
	int dimsInputPort2[IMAGE_DIMENSIONALITY];
	for (int i=0; i<IMAGE_DIMENSIONALITY; i++) {
		dimsInputPort2[i] = DYNAMICALLY_SIZED;
	}
	dimensionInfoInputPort2.dims = dimsInputPort2;
	dimensionInfoInputPort2.width = DYNAMICALLY_SIZED;
	ssSetInputPortDimensionInfo(S,  1, &dimensionInfoInputPort2);
		
	//set both input ports to be contiguous
	ssSetInputPortRequiredContiguous(S, 0, true);
	ssSetInputPortRequiredContiguous(S, 1, true);
	
	/*
	* Set direct feedthrough flag (1=yes, 0=no).
	* A port has direct feedthrough if the input is used in either
	* the mdlOutputs or mdlGetTimeOfNextVarHit functions.
	* See matlabroot/simulink/src/sfuntmpl_directfeed.txt.
	*/
	
	//both input ports are set to have direct feedthrough since they are used in mdlOutputs
	ssSetInputPortDirectFeedThrough(S, 0, 1);
	ssSetInputPortDirectFeedThrough(S, 1, 1);
	  
	//set a single sample time
	ssSetNumSampleTimes(S, 1);
	//no work vectors are necessary
	ssSetNumRWork(S, 0);
	ssSetNumIWork(S, 0);
	ssSetNumPWork(S, 0);
	ssSetNumModes(S, 0);
	ssSetNumNonsampledZCs(S, 0);
	ssSetOptions(S, 0);
} //end mdlInitializeSizes

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    This function is used to specify the sample time(s) for your
 *    S-function. You must register the same number of sample times as
 *    specified in ssSetNumSampleTimes.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
	//set sample time to be continous
	ssSetSampleTime(S, 0, CONTINUOUS_SAMPLE_TIME);
	ssSetOffsetTime(S, 0, 0.0);
}

/* Function: mdlOutputs =======================================================
 * Abstract:
 *    In this function, you compute the outputs of your S-function
 *    block. Generally outputs are placed in the output vector, ssGetY(S).
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{	
	const mxArray* stringMatrix = ssGetSFcnParam(S,0);
	int bufferLength =  (mxGetM(stringMatrix)*mxGetN(stringMatrix))+1;
	char* buffer = new char[bufferLength]; //Holds the file name
	mxGetString(stringMatrix,buffer,bufferLength);//gets the string and puts it into buffer

	//Makes sure that the buffer is not empty
	if (buffer==0){
		ssSetErrorStatus(S,"Unknown error. Unable to retrieve file.");
		return;
	}

	//Typedefs a reader and then creates the reader block
	typedef @WRITER_NAME@<VirtualPort<IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY>,
		VirtualPort<IMAGE_PIXELTYPE,IMAGE_DIMENSIONALITY> > SimITKWriterType;

	SimITKWriterType *writer = new SimITKWriterType(buffer); 
	
	//Casting the port signal to the correct type, getting DATA
	IMAGE_PIXELTYPE* inputPortMatrix = (IMAGE_PIXELTYPE*) ssGetInputPortSignal(S,1);

	// Gets the signals from the input ports, INFO
	double *inputOriginAndSpacing = (double*) ssGetInputPortSignal(S,0);
	double inputOrigin[IMAGE_DIMENSIONALITY];
	double inputSpacing[IMAGE_DIMENSIONALITY];
	for (int i=0; i<IMAGE_DIMENSIONALITY; i++) {
		inputOrigin[i] = inputOriginAndSpacing[i];
		inputSpacing[i] = inputOriginAndSpacing[i+IMAGE_DIMENSIONALITY];
	}

	//To avoid type cast to the pointer, we are copying to an unsigned int array
	unsigned int inputSize[IMAGE_DIMENSIONALITY];
	int* inSizeInt = ssGetInputPortDimensions(S,1);
	for(int i=0; i<IMAGE_DIMENSIONALITY; i++){
		inputSize[i] = inSizeInt[i];
	}
	
	//Makes sure the input image type is valid.
	if (ssGetInputPortDataType(S, 1) != @SIMULINK_PIXELTYPE_INDEX@){ // @SIMULINK_PIXELTYPE_INDEX@ is @PIXELTYPE@
		ssSetErrorStatus(S,"Invalid Image Type.");
		return;
	}

	// Set the filter block input.
	writer->GetInput(0).SetArray(inputPortMatrix);
	writer->GetInput(0).SetSize(inputSize);
	writer->GetInput(0).SetOrigin(inputOrigin);
	writer->GetInput(0).SetSpacing(inputSpacing);

	//reads the image
	writer->Run();
}

#define MDL_SET_INPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_INPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetInputPortDimensionInfo ====================================
   * Abstract:
   *    This method is called with the candidate dimensions for an input port
   *    with unknown dimensions. If the proposed dimensions are acceptable, the 
   *    method should go ahead and set the actual port dimensions.  
   *    If they are unacceptable an error should be generated via 
   *    ssSetErrorStatus.  
   *    Note that any other input or output ports whose dimensions are  
   *    implicitly defined by virtue of knowing the dimensions of the given 
   *    port can also have their dimensions set.
   *
   *    See matlabroot/simulink/src/sfun_matadd.c for an example. 
   */
static void mdlSetInputPortDimensionInfo(SimStruct *S, int_T port,
                                         const DimsInfo_T *dimsInfo)
{
	//dynamically set input port dimensions from the input signal at runtime
	if(!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;
}
#endif /* MDL_SET_INPUT_PORT_DIMENSION_INFO */

#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetOutputPortDimensionInfo ===================================
   * Abstract:
   *    This method is called with the candidate dimensions for an output port 
   *    with unknown dimensions. If the proposed dimensions are acceptable, the 
   *    method should go ahead and set the actual port dimensions.  
   *    If they are unacceptable an error should be generated via 
   *    ssSetErrorStatus.  
   *    Note that any other input or output ports whose dimensions are  
   *    implicitly defined by virtue of knowing the dimensions of the given 
   *    port can also have their dimensions set.
   *
   *    See matlabroot/simulink/src/sfun_matadd.c for an example. 
   */
static void mdlSetOutputPortDimensionInfo(SimStruct *S, int_T port,
                                            const DimsInfo_T *dimsInfo)
{
	//dynamically set output port dimensions from the ouput signal at runtime
	if(!ssSetOutputPortDimensionInfo(S, port, dimsInfo)) return;
}
#endif /* MDL_SET_OUTPUT_PORT_DIMENSION_INFO */


#define MDL_SET_DEFAULT_PORT_DIMENSION_INFO /* Change to #define to add fcn */
#if defined(MDL_SET_DEFAULT_PORT_DIMENSION_INFO) && defined(MATLAB_MEX_FILE)
  /* Function: mdlSetDefaultPortDimensionInfo ==================================
   * Abstract:
   *    This method is called when there is not enough information in your
   *    model to uniquely determine the port dimensionality of signals
   *    entering or leaving your block. When this occurs, Simulink's
   *    dimension propagation engine calls this method to ask you to set
   *    your S-functions default dimensions for any input and output ports
   *    that are dynamically sized.
   *
   *    If you do not provide this method and you have dynamically sized ports
   *    where Simulink does not have enough information to propagate the
   *    dimensionality to your S-function, then Simulink will set these unknown
   *    ports to the 'block width' which is determined by examining any known
   *    ports. If there are no known ports, the width will be set to 1.
   *
   *    See matlabroot/simulink/src/sfun_matadd.c for an example. 
   */
static void mdlSetDefaultPortDimensionInfo(SimStruct *S)
{
} 
#endif /* MDL_SET_DEFAULT_PORT_DIMENSION_INFO */

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
}

/*=============================*
 * Required S-function trailer *
 *=============================*/

#ifdef  MATLAB_MEX_FILE    /* This file is to be compiled as a MEX-file */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif

#ifdef __cplusplus
} // end of extern "C" scope
#endif
